#ifndef Q_EXPLOITER
#define Q_EXPLOITER

#include <vector>
#include <fstream>
#include <iostream>

namespace ql {

    /**
     * Implementation of the Q-learning reinforcement learning algorithm.
     * Handles the creation of the Q and R matrices and updates the Q matrix with the following formula:
     * Q[state][action] = Q[state][action] + learningRate * (R[state][action] + discountFactor * Max(Q[state]) - Q[state][action]
     */
    class QExploiter {
    private:
        const int NUM_STATES;

        const int NUM_ACTIONS;
        std::vector<std::vector<double>> Q;
    public:
        /**
         * Creates the blank Q matrix and sets the number of actions and states.
         *
         * @param NUM_STATES The number of states.
         * @param NUM_ACTIONS The number of actions.
         */
        QExploiter(const int NUM_STATES, const int NUM_ACTIONS) : NUM_STATES(NUM_STATES), NUM_ACTIONS(NUM_ACTIONS){
            Q = std::vector<std::vector<double>>(NUM_STATES);

            for (int i = 0; i < NUM_STATES; ++i) {
                Q[i] = std::vector<double>(NUM_ACTIONS, 0.0f);
            }
        }

        int exploit(int state) {
            int action;
            double maxActionValue = -1;
            for (int a = 0; a < NUM_ACTIONS; ++a) {
                if (Q[state][a] > maxActionValue) {
                    maxActionValue = Q[state][a];
                    action = a;
                }
            }
            return action;
        }

        /**
         * Reads the Q matrix from a file.
         * @param fileName the file's name from where the Q matrix will be read from.
         */
        void readQ(const std::string &fileName) {
            std::ifstream file(fileName);
            if (!file.is_open()) {
                std::cerr << "There was a problem opening the input file!\n";
                exit(1);
            }

            for (int i = 0; i < NUM_STATES; ++i) {
                for (int j = 0; j < NUM_ACTIONS; ++j) {
                    file >> Q[i][j];
                }
            }
            file.close();
        }
    };
}
#endif
